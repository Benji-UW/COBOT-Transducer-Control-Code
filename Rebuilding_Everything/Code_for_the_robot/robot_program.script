# This code is meant to be run once the socket connection has been made.

global i = 0
global message_state = "No message"
global message = ""
global latest_loop = 0
global current_origin = get_actual_tcp_pose()
global get_val_test = socket_get_var("loopback")


def my_pose_translate(pos1, rotation_vector,vel, acc):
    global vec=wrench_trans(pos1, rotation_vector)
    speedl(vec,1)
end

def my_move_to_tar():
    global moving = "working on it!"
    coord_sys = current_origin
    # The xyz coords were in mm times ten, now being converted to m
    tar_x = socket_get_var("TAR_X") / 10000
    tar_y = socket_get_var("TAR_Y") / 10000
    tar_z = socket_get_var("TAR_Z") / 10000
    # the RxRyRz coords were in rads times 10000, now being converted back to rads
    tar_Rx = socket_get_var("TAR_Rx") / 10000
    tar_Ry = socket_get_var("TAR_Ry") / 10000
    tar_Rz = socket_get_var("TAR_Rz") / 10000

    target_p = p[tar_x, tar_y, tar_z, tar_Rx, tar_Ry, tar_Rz]
    pose_motion = pose_trans(coord_sys, target_p)

    movel(pose_motion, a=0.1, v=0.03)

    socket_set_var("atTar", 1)
end


while True:
    i = i + 1
    global string_from_server = socket_read_string(timeout=0.5)
    
    if(string_from_server != ""):
        message_state = "recieved a message!"
        latest_loop = i
        message = string_from_server
        textmsg("Recieved the following: " + string_from_server)

        if(string_from_server == "testing IO"):
            socket_send_string("RSM:IO is tested")
        elif(string_from_server == "set_origin"):
            global current_origin = get_actual_tcp_pose()
        elif(string_from_server == "test_wrench_trans"):
            my_pose_translate(current_origin, p[0,0,0,1,1,0], 0.5, 2)
        elif(string_from_server == "Transmit position"):
            current_pos = get_actual_tcp_pose()
            global to_send = str_cat("RSM:",current_pos)
            socket_send_string(to_send)
        elif(string_from_server == "move2tar"):
            my_move_to_tar()
        elif(string_from_server == "set_origin"):
            current_origin = get_actual_tcp_pose()
        else:
            socket_send_string("RSM: recieved unrecognized state request")
        end
        string_from_server = ""
    else:
        message_state = "message was blank!"
    end
#    socket_set_var("loops", i)
    socket_send_string("I am alive")
end

# TODO: 
# - Test that I can recieve and process data on the robot from the computer
# - Test that I can send data from the robot and process it on the computer